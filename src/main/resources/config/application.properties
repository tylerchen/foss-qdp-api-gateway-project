###https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
###https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
##------------------------------------------------------------------------------------------##
#Spring Boot 所提供的配置优先级顺序比较复杂。按照优先级从高到低的顺序，具体的列表如下所示。
#    1. 命令行参数。
#    2. 通过 System.getProperties() 获取的 Java 系统参数。
#    3. 操作系统环境变量。
#    4. 从 java:comp/env 得到的 JNDI 属性。
#    5. 通过 RandomValuePropertySource 生成的“random.*”属性。
#    6. 应用 Jar 文件之外的属性文件。(通过spring.config.location参数)
#    7. 应用 Jar 文件内部的属性文件。
#    8. 在应用配置 Java 类（包含“@Configuration”注解的 Java 类）中通过“@PropertySource”注解声明的属性文件。
#    9. 通过“SpringApplication.setDefaultProperties”声明的默认属性。
#Spring Boot 的这个配置优先级看似复杂，其实是很合理的。比如命令行参数的优先级被设置为最高。
#这样的好处是可以在测试或生产环境中快速地修改配置参数值，而不需要重新打包和部署应用。
#SpringApplication 类默认会把以“--”开头的命令行参数转化成应用中可以使用的配置参数，如 “--name=Alex” 会设置配置参数 “name” 的值为 “Alex”。
#如果不需要这个功能，可以通过 “SpringApplication.setAddCommandLineProperties(false)” 禁用解析命令行参数。
##------------------------------------------------------------------------------------------##
# APPLICATION SETTINGS (SpringApplication)
spring.application.name=foss-qdp-api-gateway
spring.main.sources=classpath:META-INF/spring/root.xml
# http server SETTINGS (SpringApplication)
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8
server.port=9100

###----------------LOG----------------###
#springboot默认的日志级别是info
#可以通过logging.level.*=debug 来设置， * 可以是包，也可以是某个类
# 日志级别有：TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# 日志级别配置成OFF，表示关闭日志输出
# logging.file 指定日志文件名字
# logging.path 指定日志目录（此时的日志名字为spring.log）
# 日志文件输出，文件的大小10M之后，就会分割了
# logging.pattern.console 配置控制台输出日志的pattern
# logging.file.console 配置日志文件输出日志的pattern
# springboot默认支持logback, 也就是说，只需要在classptah下放一个logback.xml,logback-spring.xml的文件，即可定制日志的输出
# 使用其他的日志组件的步骤
# 1：排除掉默认的日志组件：spring-boot-starter-logging
# 2：加入新的日志路径依赖
# 3：把相应的配置文件放到classpath下

# LOGGING
#logging.config= # Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.
logging.config=classpath:logback-spring.xml
#logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.
#logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.
logging.file=${spring.application.name}.log
#logging.file.max-history=0 # Maximum of archive log files to keep. Only supported with the default logback setup.
#logging.file.max-size=10MB # Maximum log file size. Only supported with the default logback setup.
#logging.level.*= # Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.
logging.level.root=INFO
logging.level.SystemAuth=DEBUG
logging.level.FOSS=DEBUG
#logging.path= # Location of the log file. For instance, `/var/log`.
#logging.pattern.console= # Appender pattern for output to the console. Supported only with the default Logback setup.
logging.pattern.console=%clr(%traceid) %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx
#logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS # Appender pattern for log date format. Supported only with the default Logback setup.
#logging.pattern.file= # Appender pattern for output to a file. Supported only with the default Logback setup.
logging.pattern.file=%traceid %d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wEx
#logging.pattern.level=%5p # Appender pattern for log level. Supported only with the default Logback setup.
#logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.
###----------------LOG END----------------###

#zuul.routes.registry.path=/registry/**
#zuul.routes.registry.serviceId=FOSS-QDP-REGISTRY
#zuul.routes.auth.path=/auth/**
#zuul.routes.auth.serviceId=FOSS-QDP-AUTH
#zuul.routes.api.path=/api/**
#zuul.routes.api.serviceId=FOSS-QDP-API-GATEWAY
#zuul.routes.zipkin.path=/zipkin/**
#zuul.routes.zipkin.serviceId=FOSS-QDP-ZIPKIN
###zuul.routes.product.path=/api/**
###zuul.routes.product.serviceId=product
# Initial list of servers, can be changed via Archaius dynamic property at runtime
###product.ribbon.listOfServers=http://localhost:8080,http://127.0.0.1:8080,http://10.175.199.60:8080,http://120.26.82.66:8080
#ribbon 配置
#https://github.com/Netflix/ribbon/blob/master/ribbon-examples/src/main/resources/sample-client.properties
#retry
# 该参数用来开启重试机制
zuul.retryable=false
spring.cloud.loadbalancer.retry.enabled=true
zuul.ribbon-isolation-strategy=thread
# 断路器的超时时间,断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
hystrix.command.product.execution.isolation.strategy=THREAD
hystrix.command.product.execution.isolation.thread.timeoutInMilliseconds=60000
ribbon.eureka.enabled=true
###product.ribbon.eureka.enabled=false
# ribbon请求连接的超时时间
# Connect timeout used by Apache HttpClient
###product.ribbon.ConnectTimeout=3000
# 请求处理的超时时间
# Read timeout used by Apache HttpClient
###product.ribbon.ReadTimeout=3000
# 对所有操作请求都进行重试
# Whether all operations can be retried for this client
###product.ribbon.OkToRetryOnAllOperations=true
# 对当前实例的重试次数
# Max number of retries on the same server (excluding the first try)
###product.ribbon.MaxAutoRetries=0
# 对下个实例的重试次数
# Max number of next servers to retry (excluding the first server)
###product.ribbon.MaxAutoRetriesNextServer=1
# 请求失败为500时重试
###product.ribbon.retryableStatusCodes=500
###product.ribbon.EnablePrimeConnections=true
# Interval to refresh the server list from the source
#product.ribbon.ServerListRefreshInterval=2000
# 自定义的负载均衡器，带failover。
###product.ribbon.NFLoadBalancerClassName=com.foreveross.common.config.MyLoadBalancer
# 如果超时时间短，第一次调用时可能会出现超时现象，那是因为负载均衡器没有初始化好的问题，使用下两个参数可以解决问题。
# ribbon.eager-load.enabled=true 
# ribbon.eager-load.clients=hello-service, user-service

###----------------Zipkin----------------###
spring.zipkin.baseUrl=http://localhost:9300
spring.zipkin.enabled=true
spring.sleuth.sampler.percentage=1.0
###----------------Zipkin END----------------###

###----------------Eureka----------------###
#eureka issue:http://blog.csdn.net/lc0817/article/details/54375802
#指定数据中心
eureka.datacenter=FOSS
#Eureka Server端：配置关闭自我保护，并按需配置Eureka Server清理无效节点的时间间隔。
#eureka.server.enable-self-preservation # 设为false，关闭自我保护
#eureka.server.eviction-interval-timer-in-ms # 清理间隔（单位毫秒，默认是60*1000）
#eureka.server.enable-self-preservation=false
#Eureka Client端：配置开启健康检查，并按需配置续约更新时间和到期时间。
#eureka.client.healthcheck.enabled # 开启健康检查（需要spring-boot-starter-actuator依赖）
#eureka.instance.lease-renewal-interval-in-seconds # 续约更新时间间隔（默认30秒）
#eureka.instance.lease-expiration-duration-in-seconds # 续约到期时间（默认90秒）
eureka.client.healthcheck.enabled=true
#eureka.dashboard.path=/eurekaui
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
#注册中心已经开启认证
eureka.client.serviceUrl.defaultZone=http://eureka:eff7cc13b7cd4782940480db9182a9c2Sy0tSs1OdEhMyc3M00vOz9UxNDWytDQxMDMxNjcxAAA@localhost:9200/eureka/
eureka.instance.prefer-ip-address=true
#指定使用哪个网段(哪个网卡出去)
#spring.cloud.inetutils.preferred-networks=120.
eureka.instance.hostname=${spring.cloud.client.ipAddress}
eureka.instance.instanceId=${spring.cloud.client.ipAddress}:${spring.application.name}:${spring.application.instance_id:${server.port}}
###----------------Eureka END----------------###
