###https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
###https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html

##------------------------------------------------------------------------------------------##
#Spring Boot 所提供的配置优先级顺序比较复杂。按照优先级从高到低的顺序，具体的列表如下所示。
#    1. 命令行参数。
#    2. 通过 System.getProperties() 获取的 Java 系统参数。
#    3. 操作系统环境变量。
#    4. 从 java:comp/env 得到的 JNDI 属性。
#    5. 通过 RandomValuePropertySource 生成的“random.*”属性。
#    6. 应用 Jar 文件之外的属性文件。(通过spring.config.location参数)
#    7. 应用 Jar 文件内部的属性文件。
#    8. 在应用配置 Java 类（包含“@Configuration”注解的 Java 类）中通过“@PropertySource”注解声明的属性文件。
#    9. 通过“SpringApplication.setDefaultProperties”声明的默认属性。
#Spring Boot 的这个配置优先级看似复杂，其实是很合理的。比如命令行参数的优先级被设置为最高。
#这样的好处是可以在测试或生产环境中快速地修改配置参数值，而不需要重新打包和部署应用。
#SpringApplication 类默认会把以“--”开头的命令行参数转化成应用中可以使用的配置参数，如 “--name=Alex” 会设置配置参数 “name” 的值为 “Alex”。
#如果不需要这个功能，可以通过 “SpringApplication.setAddCommandLineProperties(false)” 禁用解析命令行参数。
##------------------------------------------------------------------------------------------##

# APPLICATION SETTINGS (SpringApplication)
spring.main.sources=classpath:META-INF/spring/root.xml

# http server SETTINGS (SpringApplication)
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8
server.port=9090

zuul.routes.product.path=/api/**
zuul.routes.product.serviceId=product
# Initial list of servers, can be changed via Archaius dynamic property at runtime
product.ribbon.listOfServers=http://localhost:8080,http://127.0.0.1:8080,http://192.168.112.102:8080

#ribbon 配置
#https://github.com/Netflix/ribbon/blob/master/ribbon-examples/src/main/resources/sample-client.properties
#retry
# 该参数用来开启重试机制
zuul.retryable=true
spring.cloud.loadbalancer.retry.enabled=true
zuul.ribbon-isolation-strategy=thread
# 断路器的超时时间,断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
hystrix.command.product.execution.isolation.strategy=THREAD
hystrix.command.product.execution.isolation.thread.timeoutInMilliseconds=60000
product.ribbon.eureka.enabled=false
# ribbon请求连接的超时时间
# Connect timeout used by Apache HttpClient
product.ribbon.ConnectTimeout=3000
# 请求处理的超时时间
# Read timeout used by Apache HttpClient
product.ribbon.ReadTimeout=3000
# 对所有操作请求都进行重试
# Whether all operations can be retried for this client
product.ribbon.OkToRetryOnAllOperations=true
# 对当前实例的重试次数
# Max number of retries on the same server (excluding the first try)
product.ribbon.MaxAutoRetries=0
# 对下个实例的重试次数
# Max number of next servers to retry (excluding the first server)
product.ribbon.MaxAutoRetriesNextServer=1
# 请求失败为500时重试
product.ribbon.retryableStatusCodes=500
product.ribbon.EnablePrimeConnections=true
# Interval to refresh the server list from the source
#product.ribbon.ServerListRefreshInterval=2000
# 自定义的负载均衡器，带failover。
product.ribbon.NFLoadBalancerClassName=com.foreveross.common.config.MyLoadBalancer

# 如果超时时间短，第一次调用时可能会出现超时现象，那是因为负载均衡器没有初始化好的问题，使用下两个参数可以解决问题。
# ribbon.eager-load.enabled=true 
# ribbon.eager-load.clients=hello-service, user-service 
